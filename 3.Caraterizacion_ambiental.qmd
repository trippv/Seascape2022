---
title: "Caracterización ambiental"
author: "Miguel A. Tripp-Valdez"
format: 
  html:
    code-fold: show
    toc: true
    toc-location: left
    number-sections: true
    number-depth: 3
    fontsize: 1em
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(here)
library(tidyverse)
```

## Desripción

A partir de la tabla de metadatos, se seleccionaran estudios y regiones oceanográficas de transición. Estas se seleccionarion con base a los siguientes criterios:

-   Hay evidencia multi-especie de divergencia genética
-   Hay evidencia de que esta divergencia genética esta asociada a variables ambientales
-   Existe información disponible (genotipos) para probar estas evidencias

Los estudios y regiones seleccionadas fueron:

```{r seleccionRegiones, include=TRUE, echo=FALSE}

# Lista de DOI seleccionados. Estos se encuentran dentro de la carpeta databases/genomic_repositories

DOI_list <- list.dirs(path = here("databases/genomic_repositories/"),
                      full.names = FALSE, recursive = FALSE)

# Open the main metadata table

metadata <- read_csv(file = here("output/tables/MAtriz_metadatos_backup.csv"))

# change the DOI column to allow for filtering

metadata$DOI_ID <- gsub(".*\\/", "", metadata$DOI)

# Filter the metadata table to keep only the selected DOI list

metadata_filtrado <- metadata %>%

  # filter DOI from selected list
  filter(DOI_ID %in% DOI_list) %>%

  #select specific columns to display
  select(DOI_ID, Species, Generic, `World region`, Country, `Environmental association`, `Main environemntal driver adaptive`)

# display table with knitr

knitr::kable(metadata_filtrado, caption = "Lista de estudios y regiones de transición")
```

## Variables ambientales

A continuación se muestra los sitios de muestreo en cada una de las regiones.



:::{callout-note}
 Las variables oceanograficas se descargaron de CMEMS utilizando la base de datos **GLOBAL_REANALYSIS_PHY_001_031** para temperatura y salinidad, y **GLOBAL_MULTIYEAR_BGC_001_029** para clorodila A. 
 
 En todos los casos, se descargaron datos mensuales de cada región.
:::




```{r coordTable}

########_________________________________________________________________________######
######## Extract coordinate from coordinate directory and bind to a single table ######


# use package `sp` to conver DMS to dec degrees

coordinates_all <- data.frame()

# start loop to fill the data

for (i in 1:length(DOI_list)) {

  # 1. read each file
  
  file_dt <- read.table(here("databases", "coordinates", paste0(DOI_list[i], ".txt")),
                     sep = "\t",header = TRUE)

# Check colnames to convert DMS to DEC degrees if necesary
ifelse(any(grepl("dec", colnames(file_dt))),
         #if colnames says lats are in DEC, no convertion
                 lats <- file_dt$latitude_dec,

         #otherwise, convert with sp package
                 lats <- sp::char2dms(file_dt$latitude_dms,
                                      chd = "d", chm = "m", chs="s") %>%
           as.numeric()
  )

# convert longitude
ifelse(any(grepl("dec", colnames(file_dt))),
         #if colnames says lats are in DEC, no convertion
                 lons <- file_dt$longitude_dec,

         #otherwise, convert with sp package
                 lons <- sp::char2dms(file_dt$longitude_dms,
                                      chd = "d", chm = "m", chs="s") %>%
           as.numeric()
  )


# if sample column is present, add it to the table, otherwise add NAs
ifelse("sample" %in% colnames(file_dt),
       samples <- file_dt$sample,
       samples <- rep("NA", nrow(file_dt)))


#if region is present, add it to the table, otherwise add NAs
ifelse("region" %in% colnames(file_dt),
       region <- file_dt$region,
       region <- rep("NA", nrow(file_dt)))

# if site name is present, add it to the table, otherwise add NAs
ifelse("site" %in% colnames(file_dt),
       site <- file_dt$site,
       site <- rep("NA", nrow(file_dt)))

# if site code is present, add it to the table, otherwise add NAs
ifelse("code" %in% colnames(file_dt),
      code <- file_dt$code,
      code <- rep("NA", nrow(file_dt)))



# set values for table
latitude <- as.numeric(lats)
longitude <- as.numeric(lons)
DOI <- rep(as.character(DOI_list[i]), nrow(file_dt))
N <- samples


# data frame with values
output <- data.frame(DOI = DOI,
                     latitude = latitude,
                     longitude = longitude,
                     N = samples,
                     region = region,
                     code = code,
                     site = site
                     )


# merge table with previous in loop
coordinates_all <- rbind(coordinates_all, output)

}
```

::: callout-note
## Sobre kurtosis

La curtosis es una estadística que determina el grado de concentración de los valores de una variable en torno al centro de la distribución de frecuencias.

**Una distribución normal tiene un valor de curtosis de 3**

```{r}

set.seed(123)

mesokurtic <- rnorm(1000, sd = 2)
mesokurtic_kurt <- round(moments::kurtosis(mesokurtic), 2)


leptokurtic <- c(rep(61, each = 2), rep(64, each = 5),
rep(65, each = 57), rep(67, each = 12), rep(70, each = 10))
leptokurtic_kur <- round(moments::kurtosis(leptokurtic), 2)

platikurtic <- c(rep(61, each = 10), rep(64, each = 18),
rep(65, each = 16), rep(67, each = 27), rep(70, each = 16),
rep(73, each = 17))

platikurtic_kur <- round(moments::kurtosis(platikurtic), 2)



par(mfrow = c(1,3), mar = c(4,0,4,0), oma = c(4,0,4,0))

hist(mesokurtic, breaks = 10, prob = TRUE, col = "lightblue",
     main = paste0("curtosis=", mesokurtic_kurt), yaxt="n",ylab="")

lines(density(mesokurtic), lwd = 4, col = "darkred")

hist(leptokurtic, breaks = 10, prob = TRUE, col = "lightblue",
     main=paste0("curtosis= ", leptokurtic_kur), yaxt="n", ylab="")
lines(density(leptokurtic), lwd = 4, col = "darkred")

hist(platikurtic, breaks = 10, prob = TRUE, col = "lightblue",
     main = paste0("curtosis= ", platikurtic_kur), yaxt="n", ylab="")
lines(density(platikurtic), lwd = 4, col = "darkred")
dev.off()

```
:::






```{r plot_function}
#################################################
#### Function for plotting data within the loop #
#################################################

plot_raster_stat <- function(x, stat = "stat", variable = variable){
  
  
  # convert raster to df
  nc_df <- raster::as.data.frame(x, xy=TRUE, na.rm=TRUE)
  ### fitler the coordinate data to the map area

  nc_lats <- range(nc_df$y)
  nc_lons <- range(nc_df$x)

  coords_map <- coordinates_all %>%
    filter(between(latitude, min(nc_lats), max(nc_lats)),
          between(longitude, min(nc_lons), max(nc_lons)))

  # labels for plotting
  label_name <- ifelse(variable == "temperature", "SST (°C)", variable)
  caption <- basename(ncfile)
  caption <- gsub("(-monthly).*", "", caption)
  
  # plot
map_plot <- ggplot()+
  # add raster layer
  geom_raster(aes(x=x, y=y, fill=layer), data=nc_df) +
  # define color palette of raster layer
  scale_fill_distiller(palette = "Spectral", name = label_name) +
  # add countries layers
  geom_sf(fill=grey(0.9), color=grey(0.6), lwd = 0.1, data=countries) +
  # define spatial extent
  coord_sf(xlim = range(nc_df$x), ylim = range(nc_df$y), expand = F, ndiscr = 500) +

  # Add points
  geom_point(data = coords_map,
             aes(x = longitude, y = latitude, color = DOI), size = 3)+
  # labels
  labs(title = paste0(variable," ", stat),
       caption = paste0("Data:", caption),
       x = "Longitude",
       y = "Latitude") +
  # theme
  theme_bw()


# add map name
map_name <- str_remove(basename(ncfile), ".nc")

## save plot
ggsave(plot = map_plot,
       filename = here("output/maps/environment", variable,
                                       paste0(map_name,"_",stat, ".png")),
       dpi = 300,
       device = "png")


# print map
print(map_plot)

}
```

:::{.panel-tabset}


### Temperatura 

```{r cmems_data_temp, eval = TRUE}
#| label: plot-regions-temperature
#| column: screen-inset-shaded
#| layout-ncol: 2


####_____________________________________________________#####
### plot the environemntal variables downloaded from cmems####
####______________________________________________________####


### Used dataset: global reanalysis PHY 001 - 031 - grepv2 - mnstd-monthly
### downloaded date: 12/07/2022

# import countries layer from Natural Earth
library(rnaturalearth)
library(rnaturalearthdata)

countries <- ne_countries(scale = "medium", returnclass = "sf")


### Start loop to plot the map from each reagion


variable <- "temperature"

# list the availbable maps for TEMPERATURE data

ncfile_list <- list.files(path = here("databases/environment/cmems", variable),
                          full.names = FALSE)


#

for (map in 1:length(ncfile_list)) {


# Set the path for the netcdf
ncfile <- here("databases/environment/cmems",variable, ncfile_list[map])


# Import NetCDF
nc <- ncdf4::nc_open(ncfile)


# Print information about the NetCDF file
#print(nc)


### Multiband
# import multi-band NetCDF file
nc_multi <- raster::brick(ncfile)

#### Calculate statistics #######

# calculate statistic: mean value
nc_mean <- raster::calc(nc_multi, fun = mean)

# calculate statistic: standard deviation
nc_sd <- raster::calc(nc_multi, fun = sd)

# calculate statistic: amplitude (max - min)
nc_range <- raster::calc(nc_multi, fun = function(x) {max(x) - min(x)})

# calculate statistic: kurtosis (from moments package)
nc_kurtosis <- raster::calc(nc_multi, fun = function(x) {moments::kurtosis(x)})




# plot raster for verification
#raster::plot(nc_mean)

# rotate the raster to match -180 to 180 coordinates
# nc_mean <- raster::rotate(nc_mean)
## no need to rotate for this databas

## Use plot function to plot and save each of the maps
plot_raster_stat(nc_mean, stat = "Mean", variable = variable)
plot_raster_stat(nc_sd, stat = "Sta Desv", variable = variable)
plot_raster_stat(nc_range, stat = "Range",variable = variable)
plot_raster_stat(nc_kurtosis, stat = "Kurtosis", variable = variable)


# end of loop
}
```


### Salinidad


```{r cmems_data_sal, eval = TRUE}
#| label: plot-regions-salinity
#| column: screen-inset-shaded
#| layout-ncol: 2


####_____________________________________________________#####
### plot the environemntal variables downloaded from cmems####
####______________________________________________________####


### Used dataset: global reanalysis PHY 001 - 031 - grepv2 - mnstd-monthly
### downloaded date: 12/07/2022

# import countries layer from Natural Earth
#library(rnaturalearth)
#library(rnaturalearthdata)

#countries <- ne_countries(scale = "medium", returnclass = "sf")


### Start loop to plot the map from each reagion

variable <- "salinity"

# list the availbable maps for Salinity data



ncfile_list <- list.files(path = here("databases/environment/cmems", variable),
                          full.names = FALSE)




for (map in 1:length(ncfile_list)) {


# Set the path for the netcdf
ncfile <- here("databases/environment/cmems", variable, ncfile_list[map])


# Import NetCDF
nc <- ncdf4::nc_open(ncfile)


# Print information about the NetCDF file
#print(nc)


### Multiband
# import multi-band NetCDF file
nc_multi <- raster::brick(ncfile)

#### Calculate statistics #######

# calculate statistic: mean value
nc_mean <- raster::calc(nc_multi, fun = mean)

# calculate statistic: standard deviation
nc_sd <- raster::calc(nc_multi, fun = sd)

# calculate statistic: amplitude (max - min)
nc_range <- raster::calc(nc_multi, fun = function(x) {max(x) - min(x)})

# calculate statistic: kurtosis (from moments package)
nc_kurtosis <- raster::calc(nc_multi, fun = function(x) {moments::kurtosis(x)})




# plot raster for verification
#raster::plot(nc_mean)

# rotate the raster to match -180 to 180 coordinates
# nc_mean <- raster::rotate(nc_mean)
## no need to rotate for this databas

## Use plot function to plot and save each of the maps
plot_raster_stat(nc_mean, stat = "Mean", variable = variable)
plot_raster_stat(nc_sd, stat = "Sta Desv", variable = variable)
plot_raster_stat(nc_range, stat = "Range", variable = variable)
plot_raster_stat(nc_kurtosis, stat = "Kurtosis", variable = variable)


# end of loop
}
```


### Clorofila A



```{r cmems_data_chla, eval = TRUE}
#| label: plot-regions-chla
#| column: screen-inset-shaded
#| layout-ncol: 2


####_____________________________________________________#####
### plot the environemntal variables downloaded from cmems####
####______________________________________________________####


### Used dataset: cmems_mod_glo_bgc_my_0.25_P1M-monthly
### downloaded date: 12/07/2022

# import countries layer from Natural Earth
#library(rnaturalearth)
#library(rnaturalearthdata)

#countries <- ne_countries(scale = "medium", returnclass = "sf")


### Start loop to plot the map from each reagion

variable <- "chlorophyll"

# list the availbable maps for Salinity data



ncfile_list <- list.files(path = here("databases/environment/cmems", variable),
                          full.names = FALSE)




for (map in 1:length(ncfile_list)) {


# Set the path for the netcdf
ncfile <- here("databases/environment/cmems", variable, ncfile_list[map])


# Import NetCDF
nc <- ncdf4::nc_open(ncfile)



# Print information about the NetCDF file
#print(nc)


### Multiband
# import multi-band NetCDF file
nc_multi <- raster::brick(ncfile)

#### Calculate statistics #######

# calculate statistic: mean value
nc_mean <- raster::calc(nc_multi, fun = mean)

# calculate statistic: standard deviation
nc_sd <- raster::calc(nc_multi, fun = sd)

# calculate statistic: amplitude (max - min)
nc_range <- raster::calc(nc_multi, fun = function(x) {max(x) - min(x)})

# calculate statistic: kurtosis (from moments package)
nc_kurtosis <- raster::calc(nc_multi, fun = function(x) {moments::kurtosis(x)})




# plot raster for verification
#raster::plot(nc_mean)

# rotate the raster to match -180 to 180 coordinates
# nc_mean <- raster::rotate(nc_mean)
## no need to rotate for this databas

## Use plot function to plot and save each of the maps
plot_raster_stat(nc_mean, stat = "Mean", variable = variable)
plot_raster_stat(nc_sd, stat = "Sta Desv", variable = variable)
plot_raster_stat(nc_range, stat = "Range", variable = variable)
plot_raster_stat(nc_kurtosis, stat = "Kurtosis", variable = variable)


# end of loop
}
```




:::
